# General Rules
- Always respond in Japanese.
- Commit changes after each file modification.
- Git commit messages should include:
  1. A colorful and unique emoji at the beginning for improved readability.
  2. A commit message written in Japanese.
  3. A title and summary that clearly describe the changes.
  4. Create a branch if necessary and suggest it.
- Be aware that the execution environment is PowerShell.
- Use ';' instead of '&&' to chain commands, as '&&' is not supported in PowerShell.

# Git Commit Rules (Based on Gitflow Concept)

## 1. Branch Strategy
   - `main`: Branch for product releases
   - `develop`: Branch for development
   - `feature/*`: Branch for new feature development
   - `release/*`: Branch for release preparation
   - `hotfix/*`: Branch for emergency bug fixes

## 2. Commit Message Format
   ```bash
   <emoji> <type>: <title>

   <body>

   <footer>
   ```

## 3. Commit Message Types
   - feat: New feature
   - fix: Bug fix
   - docs: Documentation change
   - style: Code style change (no impact on behavior)
   - refactor: Refactoring
   - perf: Performance improvement
   - test: Test addition/modification
   - chore: Build process or tool change

## 4. Important Notes
   - Focus on the main changes and their purpose.
   - Describe changes clearly and concisely.
   - Emphasize readability and use bullet points as needed.
   - Avoid overusing the same emoji.
   - Suggest separate branches for a small number of files if necessary.
   - Carefully check the differences in the staging area and accurately understand the added and removed features.

## 5. Commit Message Output
   - Include a title and body according to the specified format.
   - Do not output unnecessary information.

## 6. Commit Timing
   - Commit changes each time a file is modified.
   - If multiple files are modified simultaneously, consider grouping related changes into a single commit.

# Coding Style
- Follow DRY (Don't Repeat Yourself) principle.
- Follow Separation of Concerns principle.
- Follow KISS (Keep It Simple, Stupid) principle.
- Follow Divide and Conquer principle.
- Follow Defensive Programming principle.
- Follow YAGNI (You Aren't Gonna Need It) principle.
- Write readable code with clear naming and documentation.
- Use Test Driven Development (TDD) and unit tests.
- Use version control and code reviews.
- Follow SOLID principles.
